#lang racket/base

(require redex/reduction-semantics
         "base-lang.rkt")

(provide syntactic-funtype-table)

(define-syntax-rule (define-funtype-table funtype-table
                      [name (case-> case ...)]
                      ...)
  (begin
    (cond
      [(not (operator? (term name)))
       (error 'define-funtype-table "~a is not an operator" 'name)]
      [(not (arrow? (term case)))
       (error 'define-funtype-table "~a is not a valid arrow"
              'case)]
      ...)
    ...
    (define funtype-table
      (make-immutable-hash (list (cons (term name) (term (case-> case ...))) ...)))))

(define-funtype-table
  syntactic-funtype-table
  [add1 (case-> ;; 23 cases
         (-> (Zero) (One))
         (-> (One) (Positive-Byte))
         (-> (Byte) (Positive-Index))
         (-> (Index) (Positive-Fixnum))
         (-> (Negative-Fixnum) (Nonpositive-Fixnum))
         (-> (Nonpositive-Fixnum) (Fixnum))
         (-> (Nonnegative-Integer) (Positive-Integer))
         (-> (Negative-Integer) (Nonpositive-Integer))
         (-> (Integer) (Integer))
         (-> (Nonnegative-Rational) (Positive-Rational))
         (-> (Rational) (Rational))
         (-> (Nonnegative-Float) (Positive-Float))
         (-> (Float) (Float))
         (-> (Nonnegative-Single-Float) (Positive-Single-Float))
         (-> (Single-Float) (Single-Float))
         (-> (Nonnegative-Inexact-Real) (Positive-Inexact-Real))
         (-> (Inexact-Real) (Inexact-Real))
         (-> (Nonnegative-Real) (Positive-Real))
         (-> (Real) (Real))
         (-> (Float-Complex) (Float-Complex))
         (-> (Single-Float-Complex) (Single-Float-Complex))
         (-> (Inexact-Complex) (Inexact-Complex))
         (-> (Number) (Number)))]
  [+ (case-> ;; 86 cases
      (-> (Positive-Byte Positive-Byte) (Positive-Index))
      (-> (Byte Byte) (Index))
      (-> (Positive-Byte Positive-Byte) (Positive-Index))
      (-> (Positive-Index Index) (Positive-Fixnum))
      (-> (Index Positive-Index) (Positive-Fixnum))
      (-> (Index Index) (Nonnegative-Fixnum))
      (-> (Negative-Fixnum One) (Nonpositive-Fixnum))
      (-> (One Negative-Fixnum) (Nonpositive-Fixnum))
      (-> (Nonpositive-Fixnum Nonnegative-Fixnum) (Fixnum))
      (-> (Nonnegative-Fixnum Nonpositive-Fixnum) (Fixnum))
      (-> (Positive-Integer Nonnegative-Integer) (Positive-Integer))
      (-> (Nonnegative-Integer Positive-Integer) (Positive-Integer))
      (-> (Negative-Integer Nonpositive-Integer) (Negative-Integer))
      (-> (Nonpositive-Integer Negative-Integer) (Negative-Integer))
      (-> (Nonnegative-Integer Nonnegative-Integer) (Nonnegative-Integer))
      (-> (Nonpositive-Integer Nonpositive-Integer) (Nonpositive-Integer))
      (-> (Integer Integer) (Integer))
      (-> (Positive-Rational Nonnegative-Rational) (Positive-Rational))
      (-> (Nonnegative-Rational Positive-Rational) (Positive-Rational))
      (-> (Negative-Rational Nonpositive-Rational) (Negative-Rational))
      (-> (Nonpositive-Rational Negative-Rational) (Negative-Rational))
      (-> (Nonnegative-Rational Nonnegative-Rational) (Nonnegative-Rational))
      (-> (Nonpositive-Rational Nonpositive-Rational) (Nonpositive-Rational))
      (-> (Rational Rational) (Rational))
      (-> (Positive-Float Nonnegative-Real) (Positive-Float))
      (-> (Nonnegative-Real Positive-Float) (Positive-Float))
      (-> (Positive-Real Nonnegative-Float) (Positive-Float))
      (-> (Nonnegative-Float Positive-Real) (Positive-Float))
      (-> (Negative-Float Nonpositive-Real) (Negative-Float))
      (-> (Nonpositive-Real Negative-Float) (Negative-Float))
      (-> (Negative-Real Nonpositive-Float) (Negative-Float))
      (-> (Nonpositive-Float Negative-Real) (Negative-Float))
      (-> (Nonnegative-Float Nonnegative-Real) (Nonnegative-Float))
      (-> (Nonnegative-Real Nonnegative-Float) (Nonnegative-Float))
      (-> (Nonpositive-Float Nonpositive-Real) (Nonpositive-Float))
      (-> (Nonpositive-Real Nonpositive-Float) (Nonpositive-Float))
      (-> (Float Real) (Float))
      (-> (Real Float) (Float))
      (-> (Float Float) (Float))
      (-> (Positive-Single-Float (union Nonnegative-Rational Nonnegative-Single-Float)) (Positive-Single-Float))
      (-> ((union Nonnegative-Rational Nonnegative-Single-Float) Positive-Single-Float) (Positive-Single-Float))
      (-> ((union Positive-Rational Positive-Single-Float) Nonnegative-Single-Float) (Positive-Single-Float))
      (-> (Nonnegative-Single-Float (union Positive-Rational Positive-Single-Float)) (Positive-Single-Float))
      (-> (Negative-Single-Float (union Nonpositive-Rational Nonpositive-Single-Float)) (Negative-Single-Float))
      (-> ((union Nonpositive-Rational Nonpositive-Single-Float) Negative-Single-Float) (Negative-Single-Float))
      (-> ((union Negative-Rational Negative-Single-Float) Nonpositive-Single-Float) (Negative-Single-Float))
      (-> (Nonpositive-Single-Float (union Negative-Rational Negative-Single-Float)) (Negative-Single-Float))
      (-> (Nonnegative-Single-Float (union Nonnegative-Rational Nonnegative-Single-Float)) (Nonnegative-Single-Float))
      (-> ((union Nonnegative-Rational Nonnegative-Single-Float) Nonnegative-Single-Float) (Nonnegative-Single-Float))
      (-> (Nonpositive-Single-Float (union Nonpositive-Rational Nonpositive-Single-Float)) (Nonpositive-Single-Float))
      (-> ((union Nonpositive-Rational Nonpositive-Single-Float) Nonpositive-Single-Float) (Nonpositive-Single-Float))
      (-> (Single-Float (union Rational Single-Float)) (Single-Float))
      (-> ((union Rational Single-Float) Single-Float) (Single-Float))
      (-> (Single-Float Single-Float) (Single-Float))
      (-> (Positive-Inexact-Real Nonnegative-Real) (Positive-Inexact-Real))
      (-> (Nonnegative-Real Positive-Inexact-Real) (Positive-Inexact-Real))
      (-> (Positive-Real Nonnegative-Inexact-Real) (Positive-Inexact-Real))
      (-> (Nonnegative-Inexact-Real Positive-Real) (Positive-Inexact-Real))
      (-> (Negative-Inexact-Real Nonpositive-Real) (Negative-Inexact-Real))
      (-> (Nonpositive-Real Negative-Inexact-Real) (Negative-Inexact-Real))
      (-> (Negative-Real Nonpositive-Inexact-Real) (Negative-Inexact-Real))
      (-> (Nonpositive-Inexact-Real Negative-Real) (Negative-Inexact-Real))
      (-> (Nonnegative-Inexact-Real Nonnegative-Real) (Nonnegative-Inexact-Real))
      (-> (Nonnegative-Real Nonnegative-Inexact-Real) (Nonnegative-Inexact-Real))
      (-> (Nonpositive-Inexact-Real Nonpositive-Real) (Nonpositive-Inexact-Real))
      (-> (Nonpositive-Real Nonpositive-Inexact-Real) (Nonpositive-Inexact-Real))
      (-> (Inexact-Real Real) (Inexact-Real))
      (-> (Real Inexact-Real) (Inexact-Real))
      (-> (Positive-Real Nonnegative-Real) (Positive-Real))
      (-> (Nonnegative-Real Positive-Real) (Positive-Real))
      (-> (Negative-Real Nonpositive-Real) (Negative-Real))
      (-> (Nonpositive-Real Negative-Real) (Negative-Real))
      (-> (Nonnegative-Real Nonnegative-Real) (Nonnegative-Real))
      (-> (Nonpositive-Real Nonpositive-Real) (Nonpositive-Real))
      (-> (Real Real) (Real))
      (-> (Exact-Number Exact-Number) (Exact-Number))
      (-> (Float-Complex Number) (Float-Complex))
      (-> (Number Float-Complex) (Float-Complex))
      (-> (Float Inexact-Complex) (Float-Complex))
      (-> (Inexact-Complex Float) (Float-Complex))
      (-> (Single-Float-Complex (union Rational Single-Float Single-Float-Complex)) (Single-Float-Complex))
      (-> ((union Rational Single-Float Single-Float-Complex) Single-Float-Complex) (Single-Float-Complex))
      (-> (Inexact-Complex (union Rational Inexact-Real Inexact-Complex)) (Inexact-Complex))
      (-> ((union Rational Inexact-Real Inexact-Complex) Inexact-Complex) (Inexact-Complex))
      (-> (Number Number) (Number)))]
  [< (case-> ;; 88 cases =O
      (-> (Integer One) (Boolean (∈ 0 Nonpositive-Integer) (∈ 0 Positive-Integer)))
      (-> (Real Zero) (Boolean (∈ 0 Negative-Real) (∈ 0 Nonnegative-Real)))
      (-> (Zero Real) (Boolean (∈ 1 Positive-Real) (∈ 1 Nonpositive-Real)))
      (-> (Real Real-Zero) (Boolean (∈ 0 Negative-Real) tt)) ;; False says nothing because of NaN
      (-> (Real-Zero Real) (Boolean (∈ 1 Positive-Real) tt)) ;; False says nothing because of NaN
      (-> (Byte Positive-Byte) (Boolean tt (∈ 0 Positive-Byte)))
      (-> (Byte Byte) (Boolean (∈ 1 Positive-Byte) tt))
      (-> (Positive-Integer Byte) (Boolean (∧ (∈ 0 Positive-Byte) (∈ 1 Positive-Byte)) tt))
      (-> (Positive-Real Byte) (Boolean (∈ 1 Positive-Byte) tt)) ; Positive-Real is ok here, no prop for #f
      (-> (Byte Positive-Integer) (Boolean tt (∧ (∈ 0 Positive-Byte) (∈ 1 Positive-Byte))))
      (-> (Byte Positive-Rational) (Boolean tt (∈ 0 Positive-Byte))) ; can't be Positive-Real, which includes NaN
      (-> (Nonnegative-Integer Byte) (Boolean (∧ (∈ 0 Byte) (∈ 1 Positive-Byte)) tt))
      (-> (Nonnegative-Real Byte) (Boolean (∈ 1 Positive-Byte) tt))
      (-> (Byte Nonnegative-Integer) (Boolean tt (∈ 1 Byte)))
      (-> (Index Positive-Index) (Boolean tt (∈ 0 Positive-Index)))
      (-> (Index Index) (Boolean (∈ 1 Positive-Index) tt))
      (-> (Positive-Integer Index) (Boolean (∧ (∈ 0 Positive-Index) (∈ 1 Positive-Index)) tt))
      (-> (Positive-Real Index) (Boolean (∈ 1 Positive-Index) tt))
      (-> (Index Positive-Integer) (Boolean tt (∧ (∈ 0 Positive-Index) (∈ 1 Positive-Index))))
      (-> (Index Positive-Rational) (Boolean tt (∈ 0 Positive-Index))) ; can't be Positive-Real, which includes NaN
      (-> (Nonnegative-Integer Index) (Boolean (∧ (∈ 0 Index) (∈ 1 Positive-Index)) tt))
      (-> (Nonnegative-Real Index) (Boolean (∈ 1 Positive-Index) tt))
      (-> (Index Nonnegative-Integer) (Boolean tt (∈ 1 Index)))
      (-> (Fixnum Positive-Integer) (Boolean tt (∧ (∈ 0 Positive-Fixnum) (∈ 1 Positive-Fixnum))))
      (-> (Fixnum Positive-Rational) (Boolean tt (∈ 0 Positive-Fixnum)))
      (-> (Fixnum Nonnegative-Integer) (Boolean tt (∧ (∈ 0 Nonnegative-Fixnum) (∈ 1 Nonnegative-Fixnum))))
      (-> (Fixnum Nonnegative-Rational) (Boolean tt (∈ 0 Nonnegative-Fixnum)))
      (-> (Nonnegative-Integer Fixnum) (Boolean (∧ (∈ 0 Nonnegative-Fixnum) (∈ 1 Positive-Fixnum)) tt))
      (-> (Nonnegative-Real Fixnum) (Boolean (∈ 1 Positive-Fixnum) tt))
      (-> (Fixnum Nonpositive-Integer) (Boolean (∧ (∈ 0 Negative-Fixnum) (∈ 1 Nonpositive-Fixnum)) tt))
      (-> (Fixnum Nonpositive-Real) (Boolean (∈ 0 Negative-Fixnum) tt))
      (-> (Negative-Integer Fixnum) (Boolean tt (∧ (∈ 0 Negative-Fixnum) (∈ 1 Negative-Fixnum))))
      (-> (Negative-Rational Fixnum) (Boolean tt (∈ 1 Negative-Fixnum)))
      (-> (Nonpositive-Integer Fixnum) (Boolean tt (∧ (∈ 0 Nonpositive-Fixnum) (∈ 1 Nonpositive-Fixnum))))
      (-> (Nonpositive-Rational Fixnum) (Boolean tt (∈ 1 Nonpositive-Fixnum)))
      (-> (Real Positive-Infinity) (Boolean (∉ 0 (union Inexact-Real-NaN Positive-Infinity))
                                            (∈ 0 (union Inexact-Real-NaN Positive-Infinity))))
      (-> (Negative-Infinity Real) (Boolean (∉ 1 (union Inexact-Real-NaN Negative-Infinity))
                                            (∈ 1 (union Inexact-Real-NaN Negative-Infinity))))
      (-> (Positive-Infinity Real) (Boolean ff tt))
      (-> (Real Negative-Infinity) (Boolean ff tt))
      ;; <-type-pattern Integer
      (-> (Integer Zero) (Boolean (∈ 0 Negative-Integer) (∈ 0 Nonnegative-Integer)))
      (-> (Zero Integer) (Boolean (∈ 1 Positive-Integer) (∈ 1 Nonpositive-Integer)))
      (-> (Integer Positive-Real) (Boolean tt (∈ 0 Positive-Integer)))
      (-> (Integer Nonnegative-Real) (Boolean tt (∈ 0 Nonnegative-Integer)))
      (-> (Nonnegative-Real Integer) (Boolean (∈ 1 Positive-Integer) tt))
      (-> (Integer Nonpositive-Real) (Boolean (∈ 0 Negative-Integer) tt))
      (-> (Negative-Real Integer) (Boolean tt (∈ 1 Negative-Integer)))
      (-> (Nonpositive-Real Integer) (Boolean tt (∈ 1 Nonpositive-Integer)))
      ;; <-type-pattern Rational
      (-> (Rational Zero) (Boolean (∈ 0 Negative-Rational) (∈ 0 Nonnegative-Rational)))
      (-> (Zero Rational) (Boolean (∈ 1 Positive-Rational) (∈ 1 Nonpositive-Rational)))
      (-> (Rational Positive-Real) (Boolean tt (∈ 0 Positive-Rational)))
      (-> (Rational Nonnegative-Real) (Boolean tt (∈ 0 Nonnegative-Rational)))
      (-> (Nonnegative-Real Rational) (Boolean (∈ 1 Positive-Rational) tt))
      (-> (Rational Nonpositive-Real) (Boolean (∈ 0 Negative-Rational) tt))
      (-> (Negative-Real Rational) (Boolean tt (∈ 1 Negative-Rational)))
      (-> (Nonpositive-Real Rational) (Boolean tt (∈ 1 Nonpositive-Rational)))
      ;; <-type-pattern Float
      (-> (Float Real-Zero) (Boolean (∈ 0 Negative-Float) tt))
      (-> (Real-Zero Float) (Boolean (∈ 1 Positive-Float) tt))
      (-> (Float Positive-Real) (Boolean tt tt))
      (-> (Float Nonnegative-Real) (Boolean tt tt))
      (-> (Nonnegative-Real Float) (Boolean (∈ 1 Positive-Float) tt))
      (-> (Float Nonpositive-Real) (Boolean (∈ 0 Negative-Float) tt))
      (-> (Negative-Real Float) (Boolean tt tt))
      (-> (Nonpositive-Real Float) (Boolean tt tt))
      ;; <-type-pattern Single-Float
      (-> (Single-Float Real-Zero) (Boolean (∈ 0 Negative-Single-Float) tt))
      (-> (Real-Zero Single-Float) (Boolean (∈ 1 Positive-Single-Float) tt))
      (-> (Single-Float Positive-Real) (Boolean tt tt))
      (-> (Single-Float Nonnegative-Real) (Boolean tt tt))
      (-> (Nonnegative-Real Single-Float) (Boolean (∈ 1 Positive-Single-Float) tt))
      (-> (Single-Float Nonpositive-Real) (Boolean (∈ 0 Negative-Single-Float) tt))
      (-> (Negative-Real Single-Float) (Boolean tt tt))
      (-> (Nonpositive-Real Single-Float) (Boolean tt tt))
      ;; <-type-pattern Inexact-Real
      (-> (Inexact-Real Real-Zero) (Boolean (∈ 0 Negative-Inexact-Real) tt))
      (-> (Real-Zero Inexact-Real) (Boolean (∈ 1 Positive-Inexact-Real) tt))
      (-> (Inexact-Real Positive-Real) (Boolean tt tt))
      (-> (Inexact-Real Nonnegative-Real) (Boolean tt tt))
      (-> (Nonnegative-Real Inexact-Real) (Boolean (∈ 1 Positive-Inexact-Real) tt))
      (-> (Inexact-Real Nonpositive-Real) (Boolean (∈ 0 Negative-Inexact-Real) tt))
      (-> (Negative-Real Inexact-Real) (Boolean tt tt))
      (-> (Nonpositive-Real Inexact-Real) (Boolean tt tt))
      ;; <-type-pattern Real
      (-> (Real Real-Zero) (Boolean (∈ 0 Negative-Real) tt))
      (-> (Real-Zero Real) (Boolean (∈ 1 Positive-Real) tt))
      (-> (Real Positive-Real) (Boolean tt tt))
      (-> (Real Nonnegative-Real) (Boolean tt tt))
      (-> (Nonnegative-Real Real) (Boolean (∈ 1 Positive-Real) tt))
      (-> (Real Nonpositive-Real) (Boolean (∈ 0 Negative-Real) tt))
      (-> (Negative-Real Real) (Boolean tt tt))
      (-> (Nonpositive-Real Real) (Boolean tt tt))
      ;; end of <-type-pattern
      (-> (Real Real) (Boolean)))])

;(define (<-type-pattern base pos non-neg neg non-pos [zero (term Real-Zero)]
;                        #:no-false-props? [no-false-props? #f])
;  (define (<-case l r true-prop false-prop)
;    (term (-> ,base ,zero Boolean : ,true-prop ,(if no-false-props? (term tt) false-prop))))
;  (list (<-case base zero (term (∈ 0 ,neg)) (term (∈ 0 ,non-neg)))
;        (<-case zero base (term (∈ 1 ,pos)) (term (∈ 1 ,non-pos)))
;        (<-case base (term Positive-Real) (term tt) (term (∈ 0 ,pos)))
;        (<-case base (term Nonnegative-Real) (term tt) (term (∈ 0 ,non-neg)))
;        (<-case (term Nonnegative-Real) base (term (∈ 1 ,pos)) 'tt)
;        (<-case base (term Nonpositive-Real) (term (∈ 0 ,neg)) 'tt)
;        (<-case (term Negative-Real) base (term tt) (term (∈ 1 ,neg)))
;        (<-case (term Nonpositive-Real) base (term tt) (term (∈ 1 ,non-pos)))))
;
;(<-type-pattern (term Integer)
;                (term Positive-Integer)
;                (term Nonnegative-Integer)
;                (term Negative-Integer)
;                (term Nonpositive-Integer)
;                (term Zero))
;(<-type-pattern (term Rational)
;                (term Positive-Rational)
;                (term Nonnegative-Rational)
;                (term Negative-Rational)
;                (term Nonpositive-Rational)
;                (term Zero))
;(<-type-pattern (term Float)
;                (term Positive-Float)
;                (term Nonnegative-Float)
;                (term Negative-Float)
;                (term Nonpositive-Float)
;                #:no-false-props? #t)
;(<-type-pattern (term Single-Float)
;                (term Positive-Single-Float)
;                (term Nonnegative-Single-Float)
;                (term Negative-Single-Float)
;                (term Nonpositive-Single-Float)
;                #:no-false-props? #t)
;(<-type-pattern (term Inexact-Real)
;                (term Positive-Inexact-Real)
;                (term Nonnegative-Inexact-Real)
;                (term Negative-Inexact-Real)
;                (term Nonpositive-Inexact-Real)
;                #:no-false-props? #t)
;(<-type-pattern (term Real)
;                (term Positive-Real)
;                (term Nonnegative-Real)
;                (term Negative-Real)
;                (term Nonpositive-Real)
;                #:no-false-props? #t)

