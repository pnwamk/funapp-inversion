module Types.SemanticOpTypes where

import Types.LazyBDD
import Types.BaseEnv

opTypes :: [(String, OpSpec)]
opTypes =
  [ ("add1", (UnOp
              [ (zero, one)
              , (one, byte)
              , (byte, index)
              , (index, fixnum)
              , (integer, integer)
              , (rational, rational)
              , (float, float)
              , (singleFloat, singleFloat)
              , (floatComplex, floatComplex)
              , (singleFloatComplex, singleFloatComplex)
              , (nonposFixnum, fixnum)
              , (negInteger, nonposInteger)
              , (nonnegReal, posReal)
              , (number, number)]))
  , ("sub1", (UnOp
              [ (one, zero)
              , (posByte, byte)
              , (posIndex, index)
              , (nonnegFixnum, fixnum)
              , (posInteger, nonnegInteger)
              , (integer, integer)
              , (rational, rational)
              , (float, float)
              , (singleFloat, singleFloat)
              , (nonposReal, negReal)
              , (floatComplex, floatComplex)
              , (singleFloatComplex, singleFloatComplex)
              , (number, number)]))
  , ("abs", (UnOp
             [ (realZero, realZero)
             , (integer, nonnegInteger)
             , (rational, nonnegRational)
             , (float, nonnegFloat)
             , (singleFloat, nonnegSingleFloat)
             , ((tyOr' [posReal, negReal]), posReal)]))

  , ("sqr", (UnOp [ (zero, zero)
                  , (one, one)
                  , (byte, index)
                  , (integer, nonnegInteger)
                  , (posRational, posRational)
                  , (rational, nonnegRational)
                  , (float, nonnegFloat)
                  , (singleFloat, nonnegSingleFloat)
                  , (floatComplex, floatComplex)
                  , (singleFloatComplex, singleFloatComplex)
                  , (exactNumber, exactNumber)
                  , (number, number)]))
    
  , ("sqrt", (UnOp [ (zero, zero)
                   , (one, one)
                   , (nonnegFloat, nonnegFloat)
                   , (nonnegSingleFloat, nonnegSingleFloat)
                   , (inexactRealPosZero, inexactRealPosZero)
                   , (inexactRealNegZero, inexactRealNegZero)
                   , (realZero, realZero)
                   , (posReal, posReal)
                   , (floatComplex, floatComplex)
                   , (singleFloatComplex, singleFloatComplex)
                   , (number, number)]))
    
  , ("expt", (BinOp [ (one, rational, one)
                    , (number, zero, one) -- will error if neg
                    , (integer, nonnegInteger, integer)
                    , (posRational, integer, posRational)
                    , (nonnegRational, integer, nonnegRational)
                    , (rational, integer, rational)
                    , (nonnegFloat, real, (tyOr nonnegFloat one))
                    , (posReal, nonnegFloat, (tyOr nonnegFloat one))
                    , (float, (tyOr negFixnum posFixnum), float)
                    , (float, float, (tyOr float floatComplex))
                    , (singleFloat, (tyOr negFixnum posFixnum), singleFloat)
                    , (singleFloat, singleFloat, (tyOr singleFloat singleFloatComplex))
                    , (posReal, real, nonnegReal)
                    , (nonnegReal, real, real)
                    , (inexactReal, inexactReal, (tyOr inexactReal inexactComplex))
                    , (real, nonnegInteger, real)
                    , (floatComplex, float, (tyOr floatComplex float))
                    , (floatComplex, inexactReal, (tyOr floatComplex inexactReal))
                    , (floatComplex, inexactComplex, floatComplex)
                    , (singleFloatComplex, singleFloatComplex, singleFloatComplex)
                    , (singleFloatComplex, singleFloat, (tyOr singleFloatComplex singleFloat))
                    , (inexactComplex, inexactComplex, inexactComplex)
                    , (number, number, number)]))
    
  , ("modulo", (BinOp [ (one, one, zero)
                      , (integer, byte, byte)
                      , (byte, nonnegInteger, byte)
                      , (integer, index, index)
                      , (index, nonnegInteger, index)
                      , (integer, nonnegFixnum, nonnegFixnum)
                      , (nonnegFixnum, nonnegInteger, nonnegFixnum)
                      , (integer, nonnegInteger, nonnegInteger)
                      , (nonnegInteger, nonnegInteger, nonnegInteger)
                      , (integer, nonposFixnum, nonposFixnum)
                      , (integer, nonposInteger, nonposInteger)
                      , (integer, fixnum, fixnum)
                      , (integer, integer, integer)]))
  
  , ("quotient", (BinOp [ (posFixnum, one, posFixnum)
                        , (negFixnum, one, negFixnum)
                        , (byte, nonnegInteger, byte)
                        , (index, nonnegInteger, index)
                        , (nonposFixnum, nonnegFixnum, nonposFixnum)
                        , (nonnegFixnum, integer, fixnum)
                        , (nonnegInteger, nonnegInteger, nonnegInteger)
                        , (nonnegInteger, nonposInteger, nonposInteger)
                        , (nonposInteger, nonnegInteger, nonposInteger)
                        , (nonposInteger, nonposInteger, nonnegInteger)]))
    
  , ("+", (BinOp
            [ (byte, byte, index)
            , (index, index, nonnegFixnum)
            , (negFixnum, one, nonposFixnum)
            , (one, negFixnum, nonposFixnum)
            , (nonposFixnum, nonnegFixnum, fixnum)
            , (nonnegFixnum, nonposFixnum, fixnum)
            , (integer, integer, integer)
            , (float, real, float)
            , (real, float, float)
            , (singleFloat, (tyOr' [rational, singleFloat]), singleFloat)
            , ((tyOr' [rational, singleFloat]), singleFloat, singleFloat)
            , (posReal, nonnegReal, posReal)
            , (nonnegReal, posReal, posReal)
            , (negReal, nonposReal, negReal)
            , (nonposReal, negReal, negReal)
            , (nonnegReal, nonnegReal, nonnegReal)
            , (nonposReal, nonposReal, nonposReal)
            , (real, real, real)
            , (exactNumber, exactNumber, exactNumber)
            , (floatComplex, number, floatComplex)
            , (number, floatComplex, floatComplex)
            , (float, inexactComplex, floatComplex)
            , (inexactComplex, float, floatComplex)
            , (singleFloatComplex, (tyOr' [rational, singleFloat, singleFloatComplex]), singleFloatComplex)
            , ((tyOr' [rational, singleFloat, singleFloatComplex]), singleFloatComplex, singleFloatComplex)
            , (number, number, number)])) 
    
  , ("-", (BinOp
            [ (zero, posReal, negReal) -- negation pattern
            , (zero, nonnegReal, nonposReal) -- negation pattern
            , (zero, negReal, posReal) -- negation pattern
            , (zero, nonposReal, nonnegReal) -- negation pattern
            , (one, one, zero)
            , (posByte, one, byte)
            , (posIndex, one, index)
            , (posInteger, one, nonnegInteger)
            , (nonnegFixnum, nonnegFixnum, fixnum)
            , (negFixnum, nonposFixnum, fixnum)
            , (integer, integer, integer)
            , (posRational, nonposRational, posRational)
            , (negRational, nonnegRational, negRational)
            , (float, real, float)
            , (real, float, float)
            , (singleFloat, (tyOr' [singleFloat, rational]), singleFloat)
            , ((tyOr' [singleFloat, rational]), singleFloat, singleFloat)
            , (real, real, real)
            , (exactNumber, exactNumber, exactNumber)
            , (floatComplex, number, floatComplex)
            , (number, floatComplex, floatComplex)
            , (singleFloatComplex, (tyOr' [singleFloatComplex, exactNumber]), singleFloatComplex)
            , ((tyOr' [singleFloatComplex, exactNumber]), singleFloatComplex, singleFloatComplex)
            , (number, number, number)]))

  , ("*", (BinOp
            [ (zero, number, zero)
            , (number, zero, zero)
            , (byte, byte, index)
            , (integer, integer, integer)
            , (tyAnd' [rational, (tyNot zero)], tyAnd' [rational, (tyNot zero)], tyAnd' [rational, (tyNot zero)])
            , (float, (tyOr' [posReal, negReal]), float)
            , ((tyOr' [posReal, negReal]), float, float)
            , (float, float, float)
            , (singleFloat, (tyOr' [posRational, negRational, singleFloat]), singleFloat)
            , ((tyOr' [posRational, negRational, singleFloat]), singleFloat, singleFloat)
            , (inexactReal, inexactReal, inexactReal)
            , (nonnegReal, nonnegReal, nonnegReal) -- (* +inf.0 0.0) -> +nan.0
            , (nonposReal, nonposReal, nonnegReal)
            , (nonposReal, nonnegReal, nonposReal)
            , (nonnegReal, nonposReal, nonposReal)
            , (floatComplex, (tyOr' [inexactComplex, inexactReal, posRational, negRational]), floatComplex)
            , ((tyOr' [inexactComplex, inexactReal, posRational, negRational]), floatComplex, floatComplex)
            , (singleFloatComplex, (tyOr' [singleFloatComplex, singleFloat, posRational, negRational]), singleFloatComplex)
            , ((tyOr' [singleFloatComplex, singleFloat, posRational, negRational]), singleFloatComplex, singleFloatComplex)
            , (inexactComplex, (tyOr' [inexactComplex, inexactReal, posRational, negRational]), inexactComplex)
            , ((tyOr' [inexactComplex, inexactReal, posRational, negRational]), inexactComplex, inexactComplex)
            , (number, number, number)]))

  , ("/", (BinOp
            [ (number, zero, emptyTy)
            , (zero, number, zero)
            , (one, one, one)
            , (tyAnd' [rational, (tyNot zero)], tyAnd' [rational, (tyNot zero)], tyAnd' [rational, (tyNot zero)])
            , ((tyOr' [posReal, negReal, float]), float, float)
            , (float, real, float) -- if any argument after the first is exact 0, not a problem
            , (singleFloat, (tyOr' [posRational, negRational, singleFloat]), singleFloat)
            , ((tyOr' [posRational, negRational, singleFloat]), singleFloat, singleFloat)
            , (inexactReal, inexactReal, inexactReal)
            , (posReal, posReal, nonnegReal)
            , (negReal, negReal, nonnegReal) -- 0.0 is non-neg, but doesn't preserve sign
            , (negReal, posReal, nonposReal) -- idem
            , (posReal, negReal, nonposReal) -- idem
            , ((tyOr' [inexactComplex, inexactReal, posRational, negRational]), floatComplex, floatComplex)
            , (floatComplex, number, floatComplex) -- if any argument after the first is exact 0, not a problem
            , (singleFloatComplex, (tyOr' [singleFloatComplex, singleFloat, posRational, negRational]), singleFloatComplex)
            , ((tyOr' [singleFloatComplex, singleFloat, posRational, negRational]), singleFloatComplex, singleFloatComplex)
            , (inexactComplex, (tyOr' [inexactComplex, inexactReal, posRational, negRational]), inexactComplex)
            , ((tyOr' [inexactComplex, inexactReal, posRational, negRational]), inexactComplex, inexactComplex)
            , (number, number, number)]))

  , ("max", (BinOp
              [ (one, one, one)
              , (one, zero, one)
              , (zero, one, one)
              , (posByte, byte, posByte)
              , (byte, posByte, posByte)
              , (index, index, index)
              , (fixnum, fixnum, fixnum)
              , (integer, integer, integer)
              , (rational, rational, rational)
              , (float, float, float)
              , (singleFloat, singleFloat, singleFloat)
              , (inexactRealPosZero, inexactRealPosZero, inexactRealPosZero)
              , (inexactRealNegZero, inexactRealNegZero, inexactRealNegZero)
              , (inexactReal, inexactReal, inexactReal)
              , (posReal, real, posReal)
              , (real, posReal, posReal)
              , (nonnegReal, real, nonnegReal)
              , (real, nonnegReal, nonnegReal)
              , (negReal, negReal, negReal)
              , (nonposReal, nonposReal, nonposReal)]))

  , ("min", (BinOp
              [ (one, one, one)
              , (index, index, index)
              , (byte, nonnegInteger, byte)
              , (nonnegInteger, byte, byte)
              , (nonnegFixnum, nonnegInteger, nonnegFixnum)
              , (nonnegInteger, nonnegFixnum, nonnegFixnum)
              , (fixnum, fixnum, fixnum)
              , (integer, integer, integer)
              , (rational, rational, rational)
              , (float, float, float)
              , (singleFloat, singleFloat, singleFloat)
              , (inexactRealPosZero, inexactRealPosZero, inexactRealPosZero)
              , (inexactRealNegZero, inexactRealNegZero, inexactRealNegZero)
              , (inexactReal, inexactReal, inexactReal)
              , (posReal, posReal, posReal)
              , (nonnegReal, nonnegReal, nonnegReal)
              , (negReal, real, negReal)
              , (real, negReal, negReal)
              , (nonposReal, real, nonposReal)
              , (real, nonposReal, nonposReal)]))

    
  , ("<", (BinOp
           [ -- general cases --
             -- -- -- -- -- -- -- -- --
             (realNoNaN, realNoNaN, boolTy)
           , (someNaN, real, falseTy)
           , (real, someNaN, falseTy)
             -- pos/nonpos cases --
           , (nonposRealNoNaN, posRealNoNaN, trueTy)
           , (posReal, nonposReal, falseTy)
             -- zero/neg cases --
           , (negRealNoNaN, realZeroNoNaN, trueTy)
           , (realZero, negReal, falseTy)
           -- bounded type cases --
           , (negInfinity, tyAnd' [realNoNaN, (tyNot negInfinity)], trueTy)
           , (real, negInfinity, falseTy)
           , (negIntegerNotFixnum, tyAnd' [integer, (tyNot negIntegerNotFixnum)], trueTy)
           , (tyAnd' [integer, (tyNot negIntegerNotFixnum)], negIntegerNotFixnum, falseTy)
           , (realZero, realZero, falseTy)
           , (one, one, falseTy)
           , (one, tyAnd' [posInteger, (tyNot one)], trueTy)
           , (tyAnd' [posInteger, (tyNot one)], one, falseTy)
           , (byte, posIntegerNotByte, trueTy)
           , (posIntegerNotByte, byte, falseTy)
           , (index, posIntegerNotIndex, trueTy)
           , (posIntegerNotIndex, index, falseTy)
           , (fixnum, posIntegerNotFixnum, trueTy)
           , (posIntegerNotFixnum, fixnum, falseTy)
           , (tyAnd' [realNoNaN, (tyNot posInfinity)], posInfinity, trueTy)
           , (posInfinity, real, falseTy)]))
    
  , ("<=", (BinOp
           [ -- general cases --
             -- -- -- -- -- -- -- -- --
             (realNoNaN, realNoNaN, boolTy)
           , (someNaN, real, falseTy)
           , (real, someNaN, falseTy)
             -- neg cases --
           , (negRealNoNaN, nonnegRealNoNaN, trueTy)
           , (nonnegRealNoNaN, negRealNoNaN, falseTy)
           -- zero cases
           , (realZeroNoNaN, realZeroNoNaN, trueTy)
             -- pos cases --
           , (nonposRealNoNaN, posRealNoNaN, trueTy)
           , (posRealNoNaN, nonposRealNoNaN, falseTy)
           -- bounded type cases --
           , (negInfinity, realNoNaN, trueTy)
           , (tyAnd' [realNoNaN, (tyNot negInfinity)], negInfinity, falseTy)
           , (negIntegerNotFixnum, tyAnd' [integer, (tyNot negIntegerNotFixnum)], trueTy)
           , (tyAnd' [integer, (tyNot negIntegerNotFixnum)], negIntegerNotFixnum, falseTy)
           , (one, posInteger, trueTy)
           , (tyAnd' [posInteger, (tyNot one)], one, falseTy)
           , (byte, posIntegerNotByte, trueTy)
           , (posIntegerNotByte, byte, falseTy)
           , (index, posIntegerNotIndex, trueTy)
           , (posIntegerNotIndex, index, falseTy)
           , (fixnum, posIntegerNotFixnum, trueTy)
           , (posIntegerNotFixnum, fixnum, falseTy)
           , (realNoNaN, posInfinity, trueTy)
           , (posInfinity, tyAnd' [realNoNaN, (tyNot posInfinity)], falseTy)]))

  , ("=", (BinOp
            [ (someNaN, number, falseTy)
            , (number, someNaN, falseTy)
            , (realZeroNoNaN, realZeroNoNaN, trueTy)
            , (tyAnd' [number, (tyNot realZeroNoNaN)], realZeroNoNaN, falseTy)
            , (realZeroNoNaN, tyAnd' [number, (tyNot realZeroNoNaN)], falseTy)
            , (tyAnd' [exactNumber, (tyNot one)], one, falseTy)
            , (one, tyAnd' [exactNumber, (tyNot one)], falseTy)
            , (tyAnd' [exactNumber, (tyNot byte)], byte, falseTy)
            , (byte, tyAnd' [exactNumber, (tyNot byte)], falseTy)
            , (tyAnd' [exactNumber, (tyNot index)], index, falseTy)
            , (index, tyAnd' [exactNumber, (tyNot index)], falseTy)
            , (tyAnd' [exactNumber, (tyNot fixnum)], fixnum, falseTy)
            , (fixnum, tyAnd' [exactNumber, (tyNot fixnum)], falseTy)
            , (tyAnd' [exactNumber, (tyNot integer)], integer, falseTy)
            , (integer, tyAnd' [exactNumber, (tyNot integer)], falseTy)
            , (tyAnd' [exactNumber, (tyNot rational)], rational, falseTy)
            , (rational, tyAnd' [exactNumber, (tyNot rational)], falseTy)
            , (nonposReal, posReal, falseTy)
            , (posReal, nonposReal, falseTy)
            , (nonnegReal, negReal, falseTy)
            , (negReal, nonnegReal, falseTy)
            , (number, number, boolTy)]))
  ]

